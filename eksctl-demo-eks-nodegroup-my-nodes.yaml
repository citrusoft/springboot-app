AWSTemplateFormatVersion: '2010-09-09'
Description: 'EKS Managed Nodes (SSH access: false) [created by eksctl]'
Mappings:
  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
      IRA: rolesanywhere.amazonaws.com
      SSM: ssm.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-iso:
      EC2: ec2.c2s.ic.gov
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-iso-b:
      EC2: ec2.sc2s.sgov.gov
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-iso-e:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-iso-f:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
      IRA: rolesanywhere.amazonaws.com
      SSM: ssm.amazonaws.com
Resources:
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              Iops: 3000
              Throughput: 125
              VolumeSize: 80
              VolumeType: gp3
        MetadataOptions:
          HttpPutResponseHopLimit: 2
          HttpTokens: required
        SecurityGroupIds:
          - !ImportValue eksctl-demo-eks-cluster::ClusterSecurityGroupId
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: demo-eks-my-nodes-Node
              - Key: alpha.eksctl.io/nodegroup-type
                Value: managed
              - Key: alpha.eksctl.io/nodegroup-name
                Value: my-nodes
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: demo-eks-my-nodes-Node
              - Key: alpha.eksctl.io/nodegroup-type
                Value: managed
              - Key: alpha.eksctl.io/nodegroup-name
                Value: my-nodes
          - ResourceType: network-interface
            Tags:
              - Key: Name
                Value: demo-eks-my-nodes-Node
              - Key: alpha.eksctl.io/nodegroup-type
                Value: managed
              - Key: alpha.eksctl.io/nodegroup-name
                Value: my-nodes
      LaunchTemplateName: !Sub ${AWS::StackName}
  ManagedNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      AmiType: AL2_x86_64
      ClusterName: demo-eks
      InstanceTypes:
        - t3.small
      Labels:
        alpha.eksctl.io/cluster-name: demo-eks
        alpha.eksctl.io/nodegroup-name: my-nodes
      LaunchTemplate:
        Id: !Ref LaunchTemplate
      NodeRole: !GetAtt NodeInstanceRole.Arn
      NodegroupName: my-nodes
      ScalingConfig:
        DesiredSize: 2
        MaxSize: 2
        MinSize: 2
      Subnets:
        - subnet-036bf7e658e407430
        - subnet-0ea5157da72226515
      Tags:
        alpha.eksctl.io/nodegroup-name: my-nodes
        alpha.eksctl.io/nodegroup-type: managed
  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !FindInMap
                  - ServicePrincipalPartitionMap
                  - !Ref AWS::Partition
                  - EC2
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}/NodeInstanceRole